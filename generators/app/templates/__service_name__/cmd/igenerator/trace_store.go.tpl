// Code generated by igenerator. DO NOT EDIT.

package state

import (
	"context"
	"fmt"
	"strings"

	"go.opencensus.io/trace"

	{{range .CustomImports}}
	"{{.}}"
	{{end}}
)

// force context to be used
var _ context.Context

// TraceStore wraps another Store and records trace information.
type TraceStore struct {
	store     Store
	component string
}

// NewTraceStore creates a new TraceStore.
func NewTraceStore(store Store) *TraceStore {
	component := strings.TrimPrefix(fmt.Sprintf("%T", store), "*")
	return &TraceStore{
		store:     store,
		component: component,
	}
}

var _ Store = (*TraceStore)(nil)

{{range .Methods}}
{{template "doc" . -}}
func (s *TraceStore) {{.Name}}({{template "list" .Params}}) ({{template "list" .Returns}}) {
	ctx, span := trace.StartSpan(ctx, "{{.Name}}")
	defer span.End()

	{{template "call" .Returns}} = s.store.{{.Name}}({{template "call" .Params}})
	{{if isLastReturnError .Returns }}
		if {{ lastReturnName .Returns }} != nil {
			span.Annotate([]trace.Attribute{
				trace.StringAttribute("error", {{ lastReturnName .Returns }}.Error()),
			}, "{{.Name}}")
		}
	{{end}}

	return {{template "call" .Returns}}
}
{{end}}


// Healthy calls Healthy on the wrapped store.
func (s *TraceStore) Healthy() error {
	return s.store.Healthy()
}

// Close calls Close on the wrapped store.
func (s *TraceStore) Close() error {
	return s.store.Close()
}

{{define "list"}}{{range $index, $element := .}}{{if $index}}, {{end}}{{if $element.Name}}{{$element.Name}}{{end}} {{$element.Type}}{{end}}{{end}}
{{define "call"}}{{range $index, $element := .}}{{if $index}}, {{end}}{{if $element.Name}}{{$element.Name}}{{end}}{{end}}{{end}}

{{define "error"}}{{end}}

{{define "doc"}}
{{range .Doc}}
{{.}}
{{- else}}
// {{.Name}} .
{{- end}}
{{end}}
